/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package cha;

import SSL.SSL;
import VER.VERP;
import java.util.List;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.SSLSocket;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import marchand.Produit;
import marchand.ReqMarchand;
import mspi.ReqMSPI;


/**
 *
 * @author Thibault
 */
public class Main extends javax.swing.JFrame
{
    private int PORT;
    private String IP;
    
    private SSLSocket cSock;
    private ObjectInputStream ois;
    private ObjectOutputStream oos;
 
    private List<Produit> produits;
    private String mspiAddr;
    private int mspiPort;
    
    public Main()
    {
        initComponents();
        
        // <editor-fold defaultstate="collapsed" desc="Load Properties">
        try
        {
            Properties prop = new Properties();
            FileInputStream fis = new FileInputStream("CHA.properties");
            prop.load(fis);
            
            PORT = Integer.parseInt(prop.getProperty("marchandPort", "6666"));
            IP = prop.getProperty("marchandAddr", "127.0.0.1");
            
            fis.close();
        } catch (IOException ex)
        {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        // </editor-fold>
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jButton1 = new javax.swing.JButton();
        bConnexion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tProduits = new javax.swing.JTable();
        bCommander = new javax.swing.JButton();
        tfNumCarte = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        jMenu1.setText("jMenu1");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bConnexion.setText("Connexion");
        bConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConnexionActionPerformed(evt);
            }
        });

        tProduits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produit", "Prix", "Quantité"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tProduits.setEnabled(false);
        jScrollPane1.setViewportView(tProduits);

        bCommander.setText("Commander");
        bCommander.setEnabled(false);
        bCommander.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCommanderActionPerformed(evt);
            }
        });

        tfNumCarte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNumCarteActionPerformed(evt);
            }
        });

        jLabel1.setText("Numéro de carte");

        lblStatus.setText("Status :");
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bCommander, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfNumCarte, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bConnexion, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(bCommander, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfNumCarte)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bConnexionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bConnexionActionPerformed
    {//GEN-HEADEREND:event_bConnexionActionPerformed
        try
        {
            System.out.println("Trying ip : " + IP);
            System.out.println("Trying port : " + PORT);
            cSock = SSL.getSSLSocket("127.0.0.1", 6666);
            System.out.println("Opening streams");

            oos = new ObjectOutputStream(cSock.getOutputStream());
            oos.flush();
            ois = new ObjectInputStream(cSock.getInputStream());

            
            ReqMarchand req = new ReqMarchand(ReqMarchand.PROD);            
            
            oos.writeObject(req);
            
            req = (ReqMarchand)ois.readObject();            
            
            this.produits = req.getProduits();
            
            DefaultTableModel model = (DefaultTableModel)this.tProduits.getModel();
            
            model.setRowCount(0);
            
            for (Produit p : this.produits)
            {
                model.addRow(new Object[]{p.getNom(), p.getPrix(), 0});
            }
            
            this.bCommander.setEnabled(true);
            this.tProduits.setEnabled(true);
        }
        catch (IOException | ClassNotFoundException ex)
        {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bConnexionActionPerformed

    private void bCommanderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bCommanderActionPerformed
    {//GEN-HEADEREND:event_bCommanderActionPerformed
        try
        {
            HashMap <Produit, Integer> commande = new HashMap<>();
            
            int[] selected = this.tProduits.getSelectedRows();
            for(int i = 0 ; i < selected.length ; i++)
            {
                commande.put(produits.get(i), (Integer) this.tProduits.getValueAt(i, 2));
            }
            
            ReqMarchand req = new ReqMarchand(ReqMarchand.CMD);
            req.setCommande(commande);
            
            oos.writeObject(req);
            
            // Recevoir le port et l'adresse du MSPI
            ReqMarchand repmarchand = (ReqMarchand) ois.readObject();
            this.mspiAddr = repmarchand.getMspiAddr();
            this.mspiPort = repmarchand.getMspiPort();
            
            System.out.println("Trying with IP : " + this.mspiAddr);
            System.out.println("Trying with PORT : " + this.mspiPort);
            
            // Obtenir une connection sur le MSPI
            SSLSocket mspiSock = SSL.getSSLSocket(this.mspiAddr, this.mspiPort);
            ObjectOutputStream oos_mspi = new ObjectOutputStream(mspiSock.getOutputStream());
            oos_mspi.flush();
            ObjectInputStream ois_mspi = new ObjectInputStream(mspiSock.getInputStream());
            
            // Requête sur le MSPI
            ReqMSPI reqmspi = new ReqMSPI();
            reqmspi.setCardNumber(Long.parseLong(this.tfNumCarte.getText()));
            reqmspi.setCardOwner("nassim");
            System.out.println("Sending " + reqmspi.getCardNumber() + " | " + reqmspi.getCardOwner());
            reqmspi.setType(ReqMSPI.VERIF);
            
            oos_mspi.writeObject(reqmspi);
            
            VERP repVERP = (VERP)ois_mspi.readObject();
            if(repVERP.getType() == VERP.SUCCESS)
            {
                System.out.println("ipACS : " + repVERP.getIPACS());
                System.out.println("portACS : " + repVERP.getPORTACS());
                Authentication dial = new Authentication(this, false, repVERP.getIPACS(), repVERP.getPORTACS());
                dial.setVisible(true);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Verify Enrollment Request Failed !");
                System.exit(1);
            }
            
        } 
        catch (IOException | ClassNotFoundException ex)
        {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_bCommanderActionPerformed

    private void tfNumCarteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfNumCarteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfNumCarteActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCommander;
    private javax.swing.JButton bConnexion;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tProduits;
    private javax.swing.JTextField tfNumCarte;
    // End of variables declaration//GEN-END:variables
}
